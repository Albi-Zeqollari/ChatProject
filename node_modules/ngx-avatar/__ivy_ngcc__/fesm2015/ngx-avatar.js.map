{"version":3,"file":"ngx-avatar.js","sources":["ngx-avatar/lib/sources/async-source.ts","ngx-avatar/lib/sources/avatar-source.enum.ts","ngx-avatar/lib/sources/facebook.ts","ngx-avatar/lib/sources/twitter.ts","ngx-avatar/lib/sources/google.ts","ngx-avatar/lib/sources/custom.ts","ngx-avatar/lib/sources/initials.ts","ngx-avatar/lib/sources/gravatar.ts","ngx-avatar/lib/sources/skype.ts","ngx-avatar/lib/sources/value.ts","ngx-avatar/lib/sources/vkontakte.ts","ngx-avatar/lib/sources/github.ts","ngx-avatar/lib/sources/source.factory.ts","ngx-avatar/lib/avatar-config.token.ts","ngx-avatar/lib/avatar-config.service.ts","ngx-avatar/lib/avatar.service.ts","ngx-avatar/lib/avatar.component.ts","ngx-avatar/lib/avatar.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Contract of all async sources.\n * Every async source must implement the processResponse method that extracts the avatar url from the data\n */\nexport abstract class AsyncSource implements Source {\n  readonly sourceType: AvatarSource;\n\n  constructor(public sourceId: string) {}\n\n  abstract getAvatar(size?: number): string;\n  abstract processResponse(data: any, size?: number): string;\n}\n","export enum AvatarSource {\n  FACEBOOK = 'facebook',\n  GOOGLE = 'google',\n  TWITTER = 'twitter',\n  VKONTAKTE = 'vkontakte',\n  SKYPE = 'skype',\n  GRAVATAR = 'gravatar',\n  GITHUB = 'github',\n  CUSTOM = 'custom',\n  INITIALS = 'initials',\n  VALUE = 'value'\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Facebook source impelementation.\n *  Fetch avatar source based on facebook identifier\n *  and image size\n */\nexport class Facebook implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.FACEBOOK;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    return (\n      'https://graph.facebook.com/' +\n      `${this.sourceId}/picture?width=${size}&height=${size}`\n    );\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Twitter source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Twitter implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.TWITTER;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    const twitterImgSize = this.getImageSize(size);\n    return `https://twitter.com/${\n      this.sourceId\n    }/profile_image?size=${twitterImgSize}`;\n  }\n\n  private getImageSize(size: number) {\n    if (size <= 24) {\n      return 'mini';\n    }\n\n    if (size <= 48) {\n      return 'normal';\n    }\n\n    if (size <= 73) {\n      return 'bigger';\n    }\n\n    return 'original';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Google source impelementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Google extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GOOGLE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://picasaweb.google.com/data/entry/api/user/${\n      this.sourceId\n    }?alt=json`;\n  }\n\n  /**\n   * Extract google avatar from json data\n   */\n  public processResponse(data: any, size?: number): string {\n    const avatarSrc = data.entry.gphoto$thumbnail.$t;\n    if (avatarSrc) {\n      return avatarSrc.replace('s64', 's' + size);\n    }\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Custom source impelementation.\n *  return custom image as an avatar\n *\n */\nexport class Custom implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.CUSTOM;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Initials source impelementation.\n * return the initals of the given value\n */\nexport class Initials implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.INITIALS;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(initialsSize: number): string {\n    return this.getInitials(this.sourceId, initialsSize);\n  }\n\n  /**\n   * Returns the initial letters of a name in a string.\n   */\n  private getInitials(name: string, size: number): string {\n    name = name ? name.trim() : null;\n\n    if (!name) {\n      return '';\n    }\n\n    const initials = name.split(' ');\n\n    if (size && size < initials.length) {\n      return this.constructInitials(initials.slice(0, size));\n    } else {\n      return this.constructInitials(initials);\n    }\n  }\n\n  /**\n   * Iterates a person's name string to get the initials of each word in uppercase.\n   */\n  private constructInitials(elements: string[]): string {\n    if (!elements || !elements.length) {\n      return '';\n    }\n\n    return elements\n      .filter(element => element && element.length > 0)\n      .map(element => element[0].toUpperCase())\n      .join('');\n  }\n}\n","import isRetina from 'is-retina';\nimport { Md5 } from 'ts-md5/dist/md5';\n\nimport { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Gravatar source impelementation.\n *  Fetch avatar source based on gravatar email\n */\nexport class Gravatar implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.GRAVATAR;\n  public sourceId: string;\n\n  constructor(public value: string) {\n    this.sourceId = value.match('^[a-f0-9]{32}$')\n      ? value\n      : Md5.hashStr(value).toString();\n  }\n\n  public getAvatar(size: number): string {\n    const avatarSize = isRetina() ? size * 2 : size;\n    return `https://secure.gravatar.com/avatar/${\n      this.sourceId\n    }?s=${avatarSize}&d=404`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Skype source impelementation.\n *  Fetch avatar source based on skype identifier\n */\nexport class Skype implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.SKYPE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return `https://api.skype.com/users/${this.sourceId}/profile/avatar`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Value source impelementation.\n *  return the value as avatar\n */\nexport class Value implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.VALUE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Vkontakte source impelementation.\n *  Fetch avatar source based on vkontakte identifier\n *  and image size\n */\nconst apiVersion = 5.8;\nexport class Vkontakte extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.VKONTAKTE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(size: number): string {\n    const imgSize = this.getImageSize(size);\n    return `https://api.vk.com/method/users.get?user_id=${\n      this.sourceId\n    }&v=${apiVersion}&fields=${imgSize}`;\n  }\n\n  /**\n   * extract vkontakte avatar from json data\n   */\n  public processResponse(data: any): string {\n    // avatar key property is the size used to generate avatar url\n    // size property is always the last key in the response object\n    const sizeProperty = Object.keys(data['response'][0]).pop();\n    // return avatar src\n    return data['response'][0][sizeProperty];\n  }\n\n  /**\n   * Returns image size related to vkontakte API\n   */\n  private getImageSize(size: number): string {\n    if (size <= 50) {\n      return 'photo_50';\n    }\n\n    if (size <= 100) {\n      return 'photo_100';\n    }\n\n    if (size <= 200) {\n      return 'photo_200';\n    }\n\n    return 'photo_max';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Github source impelementation.\n *  Fetch avatar source based on github identifier\n */\nexport class Github extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GITHUB;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://api.github.com/users/${this.sourceId}`;\n  }\n\n  /**\n   * extract github avatar from json data\n   */\n  public processResponse(data: any, size?: number): string {\n    if (size) {\n      return `${data.avatar_url}&s=${size}`;\n    }\n    return data.avatar_url;\n  }\n}\n","import { Injectable } from '@angular/core';\n\nimport { Source } from './source';\nimport { Facebook } from './facebook';\nimport { Twitter } from './twitter';\nimport { Google } from './google';\nimport { Custom } from './custom';\nimport { Initials } from './initials';\nimport { Gravatar } from './gravatar';\nimport { Skype } from './skype';\nimport { Value } from './value';\nimport { Vkontakte } from './vkontakte';\nimport { Github } from './github';\nimport { SourceCreator } from './source.creator';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Factory class that implements factory method pattern.\n * Used to create Source implementation class based\n * on the source Type\n */\n@Injectable()\nexport class SourceFactory {\n  private sources: { [key: string]: SourceCreator } = {};\n\n  constructor() {\n    this.sources[AvatarSource.FACEBOOK] = Facebook;\n    this.sources[AvatarSource.TWITTER] = Twitter;\n    this.sources[AvatarSource.GOOGLE] = Google;\n    this.sources[AvatarSource.SKYPE] = Skype;\n    this.sources[AvatarSource.GRAVATAR] = Gravatar;\n    this.sources[AvatarSource.CUSTOM] = Custom;\n    this.sources[AvatarSource.INITIALS] = Initials;\n    this.sources[AvatarSource.VALUE] = Value;\n    this.sources[AvatarSource.VKONTAKTE] = Vkontakte;\n    this.sources[AvatarSource.GITHUB] = Github;\n  }\n\n  public newInstance(sourceType: AvatarSource, sourceValue: string): Source {\n    return new this.sources[sourceType](sourceValue);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AvatarConfig } from './avatar-config';\n/**\n * Token used to inject the AvatarConfig object\n */\nexport const AVATAR_CONFIG = new InjectionToken<AvatarConfig>('avatar.config');\n","import { Injectable, Inject, Optional } from '@angular/core';\n\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfig } from './avatar-config';\n\n@Injectable()\nexport class AvatarConfigService {\n  constructor(\n    @Optional()\n    @Inject(AVATAR_CONFIG)\n    public userConfig: AvatarConfig\n  ) {}\n\n  public getAvatarSources(defaultSources: AvatarSource[]): AvatarSource[] {\n    if (\n      this.userConfig &&\n      this.userConfig.sourcePriorityOrder &&\n      this.userConfig.sourcePriorityOrder.length\n    ) {\n      const uniqueSources = [...new Set(this.userConfig.sourcePriorityOrder)];\n      const validSources = uniqueSources.filter(source =>\n        defaultSources.includes(source)\n      );\n      return [\n        ...validSources,\n        ...defaultSources.filter(source => !validSources.includes(source))\n      ];\n    }\n    return defaultSources;\n  }\n\n  public getAvatarColors(defaultColors: string[]): string[] {\n    return (\n      (this.userConfig &&\n        this.userConfig.colors &&\n        this.userConfig.colors.length &&\n        this.userConfig.colors) ||\n      defaultColors\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { AvatarConfigService } from './avatar-config.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\n\n/**\n * list of Supported avatar sources\n */\nexport const defaultSources = [\n  AvatarSource.FACEBOOK,\n  AvatarSource.GOOGLE,\n  AvatarSource.TWITTER,\n  AvatarSource.VKONTAKTE,\n  AvatarSource.SKYPE,\n  AvatarSource.GRAVATAR,\n  AvatarSource.GITHUB,\n  AvatarSource.CUSTOM,\n  AvatarSource.INITIALS,\n  AvatarSource.VALUE\n];\n\n/**\n * list of default colors\n */\nexport const defaultColors = [\n  '#1abc9c',\n  '#3498db',\n  '#f1c40f',\n  '#8e44ad',\n  '#e74c3c',\n  '#d35400',\n  '#2c3e50',\n  '#7f8c8d'\n];\n\n/**\n * Provides utilities methods related to Avatar component\n */\n@Injectable()\nexport class AvatarService {\n  public avatarSources: AvatarSource[] = defaultSources;\n  public avatarColors: string[] = defaultColors;\n\n  constructor(\n    private http: HttpClient,\n    private avatarConfigService: AvatarConfigService\n  ) {\n    this.overrideAvatarSources();\n    this.overrideAvatarColors();\n  }\n\n  public fetchAvatar(avatarUrl: string): Observable<any> {\n    return this.http.get(avatarUrl);\n  }\n\n  public getRandomColor(avatarText: string): string {\n    if (!avatarText) {\n      return 'transparent';\n    }\n    const asciiCodeSum = this.calculateAsciiCode(avatarText);\n    return this.avatarColors[asciiCodeSum % this.avatarColors.length];\n  }\n\n  public copmareSources(\n    sourceType1: AvatarSource,\n    sourceType2: AvatarSource\n  ): number {\n    return (\n      this.getSourcePriority(sourceType1) - this.getSourcePriority(sourceType2)\n    );\n  }\n\n  public isSource(source: string): boolean {\n    return this.avatarSources.includes(source as AvatarSource);\n  }\n\n  public isTextAvatar(sourceType: AvatarSource): boolean {\n    return [AvatarSource.INITIALS, AvatarSource.VALUE].includes(sourceType);\n  }\n\n  private overrideAvatarSources(): void {\n    this.avatarSources = this.avatarConfigService.getAvatarSources(\n      defaultSources\n    );\n  }\n\n  private overrideAvatarColors(): void {\n    this.avatarColors = this.avatarConfigService.getAvatarColors(defaultColors);\n  }\n\n  private calculateAsciiCode(value: string): number {\n    return value\n      .split('')\n      .map(letter => letter.charCodeAt(0))\n      .reduce((previous, current) => previous + current);\n  }\n\n  private getSourcePriority(sourceType: AvatarSource) {\n    return this.avatarSources.indexOf(sourceType);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ElementRef,\n  OnChanges,\n  SimpleChange,\n  OnDestroy\n} from '@angular/core';\n\nimport { Source } from './sources/source';\nimport { AsyncSource } from './sources/async-source';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { takeWhile, map } from 'rxjs/operators';\n\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-avatar',\n  styles: [\n    `\n      :host {\n        border-radius: '50%';\n      }\n    `\n  ],\n  template: `\n    <div\n      (click)=\"onAvatarClicked()\"\n      class=\"avatar-container\"\n      [ngStyle]=\"hostStyle\"\n    >\n      <img\n        *ngIf=\"avatarSrc; else textAvatar\"\n        [src]=\"avatarSrc\"\n        [width]=\"size\"\n        [height]=\"size\"\n        [ngStyle]=\"avatarStyle\"\n        (error)=\"fetchAvatarSource($event)\"\n        class=\"avatar-content\"\n      />\n      <ng-template #textAvatar>\n        <div *ngIf=\"avatarText\" class=\"avatar-content\" [ngStyle]=\"avatarStyle\">\n          {{ avatarText }}\n        </div>\n      </ng-template>\n    </div>\n  `\n})\nexport class AvatarComponent implements OnChanges, OnDestroy {\n  @Input()\n  public round = true;\n  @Input()\n  public size = 50;\n  @Input()\n  public textSizeRatio = 3;\n  @Input()\n  public bgColor: string;\n  @Input()\n  public fgColor = '#FFF';\n  @Input()\n  public borderColor: string;\n  @Input()\n  public style: any = {};\n  @Input()\n  public cornerRadius = 0;\n  @Input('facebookId')\n  public facebook: string;\n  @Input('twitterId')\n  public twitter: string;\n  @Input('googleId')\n  public google: string;\n  @Input('vkontakteId')\n  public vkontakte: string;\n  @Input('skypeId')\n  public skype: string;\n  @Input('gravatarId')\n  public gravatar: string;\n  @Input('githubId')\n  public github: string;\n  @Input('src')\n  public custom: string;\n  @Input('name')\n  public initials: string;\n  @Input('value')\n  public value: string;\n  @Input('placeholder')\n  public placeholder: string;\n  @Input('initialsSize')\n  public initialsSize: number;\n\n  @Output()\n  public clickOnAvatar: EventEmitter<any> = new EventEmitter<any>();\n\n  public isAlive = true;\n  public avatarSrc: string;\n  public avatarText: string;\n  public avatarStyle: any = {};\n  public hostStyle: any = {};\n\n  private currentSource = 0;\n  private sources: Source[] = Array();\n\n  constructor(\n    public elementRef: ElementRef,\n    public sourceFactory: SourceFactory,\n    private avatarService: AvatarService\n  ) {}\n\n  public onAvatarClicked(): void {\n    this.clickOnAvatar.emit(this.sources[this.currentSource - 1]);\n  }\n\n  /**\n   * Detect inputs change\n   *\n   * param {{ [propKey: string]: SimpleChange }} changes\n   *\n   * memberof AvatarComponent\n   */\n  public ngOnChanges(changes: { [propKey: string]: SimpleChange }): void {\n    for (const propName in changes) {\n      if (\n        this.avatarService.isSource(propName) &&\n        changes[propName].currentValue\n      ) {\n        const currentValue = changes[propName].currentValue;\n        this.addSource(AvatarSource[propName.toUpperCase()], currentValue);\n      }\n    }\n    // reintialize the avatar component when a source property value has changed\n    // the fallback system must be re-invoked with the new values.\n    this.initializeAvatar();\n  }\n\n  /**\n   * Fetch avatar source\n   *\n   * param {any} event\n   *\n   * memberOf AvatarComponent\n   */\n  public fetchAvatarSource(event?: any): void {\n    const avatarSource = this.sources[this.currentSource];\n    if (!avatarSource) {\n      return;\n    }\n    if (this.avatarService.isTextAvatar(avatarSource.sourceType)) {\n      this.buildTextAvatar(avatarSource);\n      // TODO: check if this is needed\n      this.avatarSrc = undefined;\n    } else {\n      this.buildImageAvatar(avatarSource);\n    }\n    this.currentSource++;\n  }\n\n  public ngOnDestroy(): void {\n    this.isAlive = false;\n  }\n\n  /**\n   * Initialize the avatar component and its fallback system\n   */\n  private initializeAvatar(): void {\n    this.currentSource = 0;\n    if (this.sources.length > 0 && this.sources[this.currentSource]) {\n      this.sortAvatarSources();\n      this.fetchAvatarSource();\n      this.hostStyle = {\n        width: this.size + 'px',\n        height: this.size + 'px'\n      };\n    }\n  }\n\n  private sortAvatarSources(): void {\n    this.sources.sort((source1, source2) =>\n      this.avatarService.copmareSources(source1.sourceType, source2.sourceType)\n    );\n  }\n\n  private buildTextAvatar(avatarSource: Source): void {\n    this.avatarText = avatarSource.getAvatar(this.initialsSize);\n    this.avatarStyle = this.getInitialsStyle(avatarSource.sourceId);\n  }\n\n  private buildImageAvatar(avatarSource: Source): void {\n    this.avatarStyle = this.getImageStyle();\n    if (avatarSource instanceof AsyncSource) {\n      this.fetchAndProcessAsyncAvatar(avatarSource);\n    } else {\n      this.avatarSrc = avatarSource.getAvatar(this.size);\n    }\n  }\n\n  /**\n   *\n   * returns initials style\n   *\n   * memberOf AvatarComponent\n   */\n  private getInitialsStyle(avatarValue: string): void {\n    return {\n      textAlign: 'center',\n      borderRadius: this.round ? '100%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      textTransform: 'uppercase',\n      color: this.fgColor,\n      backgroundColor: this.bgColor\n        ? this.bgColor\n        : this.avatarService.getRandomColor(avatarValue),\n      font:\n        Math.floor(this.size / this.textSizeRatio) +\n        'px Helvetica, Arial, sans-serif',\n      lineHeight: this.size + 'px',\n      ...this.style\n    };\n  }\n\n  /**\n   *\n   * returns image style\n   *\n   * memberOf AvatarComponent\n   */\n  private getImageStyle(): void {\n    return {\n      maxWidth: '100%',\n      borderRadius: this.round ? '50%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      width: this.size,\n      height: this.size,\n      ...this.style\n    };\n  }\n  /**\n   * Fetch avatar image asynchrounsly.\n   *\n   * param {Source} source represents avatar source\n   * memberof AvatarComponent\n   */\n  private fetchAndProcessAsyncAvatar(source: AsyncSource): void {\n    this.avatarService\n      .fetchAvatar(source.getAvatar())\n      .pipe(\n        takeWhile(() => this.isAlive),\n        map(response => source.processResponse(response, this.size))\n      )\n      .subscribe(\n        avatarSrc => (this.avatarSrc = avatarSrc),\n        err => {\n          console.error(\n            `ngx-avatar: error while fetching ${source.sourceType} avatar `\n          );\n        }\n      );\n  }\n\n  /**\n   * Add avatar source\n   *\n   * param sourceType avatar source type e.g facebook,twitter, etc.\n   * param sourceValue  source value e.g facebookId value, etc.\n   */\n  private addSource(sourceType: AvatarSource, sourceValue: string): void {\n    if (!this.isSourceExist(sourceType)) {\n      this.sources.push(\n        this.sourceFactory.newInstance(sourceType, sourceValue)\n      );\n    } else {\n      const index = this.sources.findIndex(\n        source => source.sourceType === sourceType\n      );\n      this.sources[index].sourceId = sourceValue;\n    }\n  }\n\n  private isSourceExist(avatarSource: AvatarSource): boolean {\n    return this.sources.map(source => source.sourceType).includes(avatarSource);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AvatarComponent } from './avatar.component';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarConfig } from './avatar-config';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfigService } from './avatar-config.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AvatarComponent],\n  providers: [SourceFactory, AvatarService, AvatarConfigService],\n  exports: [AvatarComponent]\n})\nexport class AvatarModule {\n  static forRoot(avatarConfig?: AvatarConfig): ModuleWithProviders {\n    return {\n      ngModule: AvatarModule,\n      providers: [\n        { provide: AVATAR_CONFIG, useValue: avatarConfig ? avatarConfig : {} }\n      ]\n    };\n  }\n}\n"]}