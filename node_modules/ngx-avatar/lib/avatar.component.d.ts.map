{"version":3,"file":"avatar.component.d.ts","sources":["avatar.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ElementRef, OnChanges, SimpleChange, OnDestroy } from '@angular/core';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\nexport declare class AvatarComponent implements OnChanges, OnDestroy {\n    elementRef: ElementRef;\n    sourceFactory: SourceFactory;\n    private avatarService;\n    round: boolean;\n    size: number;\n    textSizeRatio: number;\n    bgColor: string;\n    fgColor: string;\n    borderColor: string;\n    style: any;\n    cornerRadius: number;\n    facebook: string;\n    twitter: string;\n    google: string;\n    vkontakte: string;\n    skype: string;\n    gravatar: string;\n    github: string;\n    custom: string;\n    initials: string;\n    value: string;\n    placeholder: string;\n    initialsSize: number;\n    clickOnAvatar: EventEmitter<any>;\n    isAlive: boolean;\n    avatarSrc: string;\n    avatarText: string;\n    avatarStyle: any;\n    hostStyle: any;\n    private currentSource;\n    private sources;\n    constructor(elementRef: ElementRef, sourceFactory: SourceFactory, avatarService: AvatarService);\n    onAvatarClicked(): void;\n    /**\n     * Detect inputs change\n     *\n     * param {{ [propKey: string]: SimpleChange }} changes\n     *\n     * memberof AvatarComponent\n     */\n    ngOnChanges(changes: {\n        [propKey: string]: SimpleChange;\n    }): void;\n    /**\n     * Fetch avatar source\n     *\n     * param {any} event\n     *\n     * memberOf AvatarComponent\n     */\n    fetchAvatarSource(event?: any): void;\n    ngOnDestroy(): void;\n    /**\n     * Initialize the avatar component and its fallback system\n     */\n    private initializeAvatar;\n    private sortAvatarSources;\n    private buildTextAvatar;\n    private buildImageAvatar;\n    /**\n     *\n     * returns initials style\n     *\n     * memberOf AvatarComponent\n     */\n    private getInitialsStyle;\n    /**\n     *\n     * returns image style\n     *\n     * memberOf AvatarComponent\n     */\n    private getImageStyle;\n    /**\n     * Fetch avatar image asynchrounsly.\n     *\n     * param {Source} source represents avatar source\n     * memberof AvatarComponent\n     */\n    private fetchAndProcessAsyncAvatar;\n    /**\n     * Add avatar source\n     *\n     * param sourceType avatar source type e.g facebook,twitter, etc.\n     * param sourceValue  source value e.g facebookId value, etc.\n     */\n    private addSource;\n    private isSourceExist;\n}\n"]}